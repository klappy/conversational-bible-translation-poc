
import {createRequire as ___nfyCreateRequire} from "module";
import {fileURLToPath as ___nfyFileURLToPath} from "url";
import {dirname as ___nfyPathDirname} from "path";
let __filename=___nfyFileURLToPath(import.meta.url);
let __dirname=___nfyPathDirname(___nfyFileURLToPath(import.meta.url));
let require=___nfyCreateRequire(import.meta.url);


// netlify/functions/canvas-state.js
var globalState = {
  styleGuide: {
    languagePair: "English \u2192 English",
    readingLevel: "Grade 1",
    tone: "Narrator, engaging tone",
    philosophy: "Meaning-based"
  },
  glossary: {
    terms: {}
  },
  scriptureCanvas: {
    verses: {}
  },
  feedback: {
    comments: []
  },
  workflow: {
    currentPhase: "planning",
    currentVerse: "Ruth 1:1",
    currentPhrase: 0,
    phrasesCompleted: {},
    totalPhrases: 0
  },
  metadata: {
    lastUpdated: (/* @__PURE__ */ new Date()).toISOString(),
    version: 1
  }
};
var stateHistory = [];
var MAX_HISTORY = 50;
function getState() {
  return {
    ...globalState,
    metadata: {
      ...globalState.metadata,
      retrieved: (/* @__PURE__ */ new Date()).toISOString()
    }
  };
}
function updateState(updates, agentId = "user") {
  try {
    if (!updates || typeof updates !== "object") {
      throw new Error("Invalid updates provided");
    }
    stateHistory.push({
      timestamp: (/* @__PURE__ */ new Date()).toISOString(),
      agentId,
      previousState: JSON.parse(JSON.stringify(globalState)),
      updates
    });
    if (stateHistory.length > MAX_HISTORY) {
      stateHistory = stateHistory.slice(-MAX_HISTORY);
    }
    globalState = deepMerge(globalState, updates);
    globalState.metadata.lastUpdated = (/* @__PURE__ */ new Date()).toISOString();
    globalState.metadata.version++;
    return {
      success: true,
      state: getState()
    };
  } catch (error) {
    return {
      success: false,
      error: error.message
    };
  }
}
function resetState() {
  globalState = {
    styleGuide: {
      languagePair: "English \u2192 English",
      readingLevel: "Grade 1",
      tone: "Narrator, engaging tone",
      philosophy: "Meaning-based"
    },
    glossary: {
      terms: {}
    },
    scriptureCanvas: {
      verses: {}
    },
    feedback: {
      comments: []
    },
    workflow: {
      currentPhase: "planning",
      currentVerse: "Ruth 1:1",
      currentPhrase: 0,
      phrasesCompleted: {},
      totalPhrases: 0
    },
    metadata: {
      lastUpdated: (/* @__PURE__ */ new Date()).toISOString(),
      version: 1
    }
  };
  stateHistory = [];
  return getState();
}
function deepMerge(target, source) {
  const output = { ...target };
  if (isObject(target) && isObject(source)) {
    Object.keys(source).forEach((key) => {
      if (isObject(source[key])) {
        if (!(key in target)) {
          output[key] = source[key];
        } else {
          output[key] = deepMerge(target[key], source[key]);
        }
      } else {
        output[key] = source[key];
      }
    });
  }
  return output;
}
function isObject(item) {
  return item && typeof item === "object" && !Array.isArray(item);
}
var handler = async (req, context) => {
  const headers = {
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Headers": "Content-Type",
    "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
    "Content-Type": "application/json"
  };
  if (req.method === "OPTIONS") {
    return new Response("OK", { headers });
  }
  try {
    const url = new URL(req.url);
    const path = url.pathname.replace("/.netlify/functions/canvas-state", "");
    if (req.method === "GET" && (path === "" || path === "/")) {
      return new Response(JSON.stringify(getState()), {
        status: 200,
        headers
      });
    }
    if (req.method === "GET" && path === "/history") {
      return new Response(JSON.stringify({
        history: stateHistory,
        currentState: getState()
      }), {
        status: 200,
        headers
      });
    }
    if (req.method === "POST" && path === "/update") {
      const body = await req.json();
      const { updates, agentId } = body;
      const result = updateState(updates, agentId);
      return new Response(JSON.stringify(result), {
        status: result.success ? 200 : 400,
        headers
      });
    }
    if (req.method === "POST" && path === "/reset") {
      const state = resetState();
      return new Response(JSON.stringify({
        success: true,
        state
      }), {
        status: 200,
        headers
      });
    }
    return new Response(JSON.stringify({
      error: `Method ${req.method} not allowed for path ${path}`
    }), {
      status: 405,
      headers
    });
  } catch (error) {
    console.error("Canvas state error:", error);
    return new Response(JSON.stringify({
      error: "Failed to process canvas state request",
      details: error.message
    }), {
      status: 500,
      headers: {
        ...headers,
        "Content-Type": "application/json"
      }
    });
  }
};
var canvas_state_default = handler;
export {
  canvas_state_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibmV0bGlmeS9mdW5jdGlvbnMvY2FudmFzLXN0YXRlLmpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvKipcbiAqIENhbnZhcyBTdGF0ZSBNYW5hZ2VtZW50XG4gKiBNYW5hZ2VzIHRoZSBzdGF0ZSBvZiBhbGwgY2FudmFzIGFydGlmYWN0cyBzZXJ2ZXItc2lkZVxuICogVGhpcyBpcyB0aGUgc2luZ2xlIHNvdXJjZSBvZiB0cnV0aCBmb3IgdGhlIGFwcGxpY2F0aW9uIHN0YXRlXG4gKi9cblxuLy8gSW4tbWVtb3J5IHN0YXRlIHN0b3JlICh3aWxsIGJlIHJlcGxhY2VkIHdpdGggcGVyc2lzdGVudCBzdG9yYWdlIGxhdGVyKVxubGV0IGdsb2JhbFN0YXRlID0ge1xuICBzdHlsZUd1aWRlOiB7XG4gICAgbGFuZ3VhZ2VQYWlyOiBcIkVuZ2xpc2ggXHUyMTkyIEVuZ2xpc2hcIixcbiAgICByZWFkaW5nTGV2ZWw6IFwiR3JhZGUgMVwiLFxuICAgIHRvbmU6IFwiTmFycmF0b3IsIGVuZ2FnaW5nIHRvbmVcIixcbiAgICBwaGlsb3NvcGh5OiBcIk1lYW5pbmctYmFzZWRcIlxuICB9LFxuICBnbG9zc2FyeToge1xuICAgIHRlcm1zOiB7fVxuICB9LFxuICBzY3JpcHR1cmVDYW52YXM6IHtcbiAgICB2ZXJzZXM6IHt9XG4gIH0sXG4gIGZlZWRiYWNrOiB7XG4gICAgY29tbWVudHM6IFtdXG4gIH0sXG4gIHdvcmtmbG93OiB7XG4gICAgY3VycmVudFBoYXNlOiBcInBsYW5uaW5nXCIsXG4gICAgY3VycmVudFZlcnNlOiBcIlJ1dGggMToxXCIsXG4gICAgY3VycmVudFBocmFzZTogMCxcbiAgICBwaHJhc2VzQ29tcGxldGVkOiB7fSxcbiAgICB0b3RhbFBocmFzZXM6IDBcbiAgfSxcbiAgbWV0YWRhdGE6IHtcbiAgICBsYXN0VXBkYXRlZDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgIHZlcnNpb246IDFcbiAgfVxufTtcblxuLy8gU3RhdGUgdXBkYXRlIGhpc3RvcnkgKGZvciBkZWJ1Z2dpbmcgYW5kIHBvdGVudGlhbCByb2xsYmFjaylcbmxldCBzdGF0ZUhpc3RvcnkgPSBbXTtcbmNvbnN0IE1BWF9ISVNUT1JZID0gNTA7XG5cbi8qKlxuICogR2V0IHRoZSBjdXJyZW50IHN0YXRlXG4gKi9cbmZ1bmN0aW9uIGdldFN0YXRlKCkge1xuICByZXR1cm4ge1xuICAgIC4uLmdsb2JhbFN0YXRlLFxuICAgIG1ldGFkYXRhOiB7XG4gICAgICAuLi5nbG9iYWxTdGF0ZS5tZXRhZGF0YSxcbiAgICAgIHJldHJpZXZlZDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIFVwZGF0ZSB0aGUgc3RhdGUgd2l0aCB2YWxpZGF0aW9uXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZVN0YXRlKHVwZGF0ZXMsIGFnZW50SWQgPSAndXNlcicpIHtcbiAgdHJ5IHtcbiAgICAvLyBWYWxpZGF0ZSB1cGRhdGVzXG4gICAgaWYgKCF1cGRhdGVzIHx8IHR5cGVvZiB1cGRhdGVzICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHVwZGF0ZXMgcHJvdmlkZWQnKTtcbiAgICB9XG5cbiAgICAvLyBTdG9yZSBwcmV2aW91cyBzdGF0ZSBpbiBoaXN0b3J5XG4gICAgc3RhdGVIaXN0b3J5LnB1c2goe1xuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICBhZ2VudElkLFxuICAgICAgcHJldmlvdXNTdGF0ZTogSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShnbG9iYWxTdGF0ZSkpLFxuICAgICAgdXBkYXRlc1xuICAgIH0pO1xuXG4gICAgLy8gVHJpbSBoaXN0b3J5IGlmIG5lZWRlZFxuICAgIGlmIChzdGF0ZUhpc3RvcnkubGVuZ3RoID4gTUFYX0hJU1RPUlkpIHtcbiAgICAgIHN0YXRlSGlzdG9yeSA9IHN0YXRlSGlzdG9yeS5zbGljZSgtTUFYX0hJU1RPUlkpO1xuICAgIH1cblxuICAgIC8vIEFwcGx5IHVwZGF0ZXMgKGRlZXAgbWVyZ2UpXG4gICAgZ2xvYmFsU3RhdGUgPSBkZWVwTWVyZ2UoZ2xvYmFsU3RhdGUsIHVwZGF0ZXMpO1xuICAgIFxuICAgIC8vIFVwZGF0ZSBtZXRhZGF0YVxuICAgIGdsb2JhbFN0YXRlLm1ldGFkYXRhLmxhc3RVcGRhdGVkID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xuICAgIGdsb2JhbFN0YXRlLm1ldGFkYXRhLnZlcnNpb24rKztcblxuICAgIHJldHVybiB7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgc3RhdGU6IGdldFN0YXRlKClcbiAgICB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIGVycm9yOiBlcnJvci5tZXNzYWdlXG4gICAgfTtcbiAgfVxufVxuXG4vKipcbiAqIFJlc2V0IHN0YXRlIHRvIGluaXRpYWwgdmFsdWVzXG4gKi9cbmZ1bmN0aW9uIHJlc2V0U3RhdGUoKSB7XG4gIGdsb2JhbFN0YXRlID0ge1xuICAgIHN0eWxlR3VpZGU6IHtcbiAgICAgIGxhbmd1YWdlUGFpcjogXCJFbmdsaXNoIFx1MjE5MiBFbmdsaXNoXCIsXG4gICAgICByZWFkaW5nTGV2ZWw6IFwiR3JhZGUgMVwiLFxuICAgICAgdG9uZTogXCJOYXJyYXRvciwgZW5nYWdpbmcgdG9uZVwiLFxuICAgICAgcGhpbG9zb3BoeTogXCJNZWFuaW5nLWJhc2VkXCJcbiAgICB9LFxuICAgIGdsb3NzYXJ5OiB7XG4gICAgICB0ZXJtczoge31cbiAgICB9LFxuICAgIHNjcmlwdHVyZUNhbnZhczoge1xuICAgICAgdmVyc2VzOiB7fVxuICAgIH0sXG4gICAgZmVlZGJhY2s6IHtcbiAgICAgIGNvbW1lbnRzOiBbXVxuICAgIH0sXG4gICAgd29ya2Zsb3c6IHtcbiAgICAgIGN1cnJlbnRQaGFzZTogXCJwbGFubmluZ1wiLFxuICAgICAgY3VycmVudFZlcnNlOiBcIlJ1dGggMToxXCIsXG4gICAgICBjdXJyZW50UGhyYXNlOiAwLFxuICAgICAgcGhyYXNlc0NvbXBsZXRlZDoge30sXG4gICAgICB0b3RhbFBocmFzZXM6IDBcbiAgICB9LFxuICAgIG1ldGFkYXRhOiB7XG4gICAgICBsYXN0VXBkYXRlZDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgdmVyc2lvbjogMVxuICAgIH1cbiAgfTtcbiAgc3RhdGVIaXN0b3J5ID0gW107XG4gIHJldHVybiBnZXRTdGF0ZSgpO1xufVxuXG4vKipcbiAqIERlZXAgbWVyZ2UgdXRpbGl0eSBmdW5jdGlvblxuICovXG5mdW5jdGlvbiBkZWVwTWVyZ2UodGFyZ2V0LCBzb3VyY2UpIHtcbiAgY29uc3Qgb3V0cHV0ID0geyAuLi50YXJnZXQgfTtcbiAgXG4gIGlmIChpc09iamVjdCh0YXJnZXQpICYmIGlzT2JqZWN0KHNvdXJjZSkpIHtcbiAgICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGlmIChpc09iamVjdChzb3VyY2Vba2V5XSkpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIHRhcmdldCkpIHtcbiAgICAgICAgICBvdXRwdXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dHB1dFtrZXldID0gZGVlcE1lcmdlKHRhcmdldFtrZXldLCBzb3VyY2Vba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dHB1dFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgXG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGl0ZW0pIHtcbiAgcmV0dXJuIGl0ZW0gJiYgdHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KGl0ZW0pO1xufVxuXG4vKipcbiAqIE5ldGxpZnkgRnVuY3Rpb24gSGFuZGxlclxuICovXG5jb25zdCBoYW5kbGVyID0gYXN5bmMgKHJlcSwgY29udGV4dCkgPT4ge1xuICAvLyBFbmFibGUgQ09SU1xuICBjb25zdCBoZWFkZXJzID0ge1xuICAgIFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luXCI6IFwiKlwiLFxuICAgIFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVyc1wiOiBcIkNvbnRlbnQtVHlwZVwiLFxuICAgIFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctTWV0aG9kc1wiOiBcIkdFVCwgUE9TVCwgUFVULCBERUxFVEUsIE9QVElPTlNcIixcbiAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICB9O1xuXG4gIC8vIEhhbmRsZSBwcmVmbGlnaHRcbiAgaWYgKHJlcS5tZXRob2QgPT09IFwiT1BUSU9OU1wiKSB7XG4gICAgcmV0dXJuIG5ldyBSZXNwb25zZShcIk9LXCIsIHsgaGVhZGVycyB9KTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgY29uc3QgdXJsID0gbmV3IFVSTChyZXEudXJsKTtcbiAgICBjb25zdCBwYXRoID0gdXJsLnBhdGhuYW1lLnJlcGxhY2UoJy8ubmV0bGlmeS9mdW5jdGlvbnMvY2FudmFzLXN0YXRlJywgJycpO1xuXG4gICAgLy8gR0VUIC9zdGF0ZSAtIEdldCBjdXJyZW50IHN0YXRlXG4gICAgaWYgKHJlcS5tZXRob2QgPT09IFwiR0VUXCIgJiYgKHBhdGggPT09IFwiXCIgfHwgcGF0aCA9PT0gXCIvXCIpKSB7XG4gICAgICByZXR1cm4gbmV3IFJlc3BvbnNlKEpTT04uc3RyaW5naWZ5KGdldFN0YXRlKCkpLCB7IFxuICAgICAgICBzdGF0dXM6IDIwMCwgXG4gICAgICAgIGhlYWRlcnMgXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBHRVQgL2hpc3RvcnkgLSBHZXQgc3RhdGUgaGlzdG9yeVxuICAgIGlmIChyZXEubWV0aG9kID09PSBcIkdFVFwiICYmIHBhdGggPT09IFwiL2hpc3RvcnlcIikge1xuICAgICAgcmV0dXJuIG5ldyBSZXNwb25zZShKU09OLnN0cmluZ2lmeSh7IFxuICAgICAgICBoaXN0b3J5OiBzdGF0ZUhpc3RvcnksXG4gICAgICAgIGN1cnJlbnRTdGF0ZTogZ2V0U3RhdGUoKVxuICAgICAgfSksIHsgXG4gICAgICAgIHN0YXR1czogMjAwLCBcbiAgICAgICAgaGVhZGVycyBcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFBPU1QgL3VwZGF0ZSAtIFVwZGF0ZSBzdGF0ZVxuICAgIGlmIChyZXEubWV0aG9kID09PSBcIlBPU1RcIiAmJiBwYXRoID09PSBcIi91cGRhdGVcIikge1xuICAgICAgY29uc3QgYm9keSA9IGF3YWl0IHJlcS5qc29uKCk7XG4gICAgICBjb25zdCB7IHVwZGF0ZXMsIGFnZW50SWQgfSA9IGJvZHk7XG4gICAgICBcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHVwZGF0ZVN0YXRlKHVwZGF0ZXMsIGFnZW50SWQpO1xuICAgICAgXG4gICAgICByZXR1cm4gbmV3IFJlc3BvbnNlKEpTT04uc3RyaW5naWZ5KHJlc3VsdCksIHtcbiAgICAgICAgc3RhdHVzOiByZXN1bHQuc3VjY2VzcyA/IDIwMCA6IDQwMCxcbiAgICAgICAgaGVhZGVyc1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gUE9TVCAvcmVzZXQgLSBSZXNldCBzdGF0ZVxuICAgIGlmIChyZXEubWV0aG9kID09PSBcIlBPU1RcIiAmJiBwYXRoID09PSBcIi9yZXNldFwiKSB7XG4gICAgICBjb25zdCBzdGF0ZSA9IHJlc2V0U3RhdGUoKTtcbiAgICAgIFxuICAgICAgcmV0dXJuIG5ldyBSZXNwb25zZShKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIHN0YXRlXG4gICAgICB9KSwge1xuICAgICAgICBzdGF0dXM6IDIwMCxcbiAgICAgICAgaGVhZGVyc1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gTWV0aG9kIG5vdCBhbGxvd2VkXG4gICAgcmV0dXJuIG5ldyBSZXNwb25zZShKU09OLnN0cmluZ2lmeSh7IFxuICAgICAgZXJyb3I6IGBNZXRob2QgJHtyZXEubWV0aG9kfSBub3QgYWxsb3dlZCBmb3IgcGF0aCAke3BhdGh9YCBcbiAgICB9KSwgeyBcbiAgICAgIHN0YXR1czogNDA1LCBcbiAgICAgIGhlYWRlcnMgXG4gICAgfSk7XG5cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiQ2FudmFzIHN0YXRlIGVycm9yOlwiLCBlcnJvcik7XG4gICAgcmV0dXJuIG5ldyBSZXNwb25zZShKU09OLnN0cmluZ2lmeSh7IFxuICAgICAgZXJyb3I6IFwiRmFpbGVkIHRvIHByb2Nlc3MgY2FudmFzIHN0YXRlIHJlcXVlc3RcIixcbiAgICAgIGRldGFpbHM6IGVycm9yLm1lc3NhZ2VcbiAgICB9KSwge1xuICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIC4uLmhlYWRlcnMsXG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGhhbmRsZXI7XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7O0FBT0EsSUFBSSxjQUFjO0FBQUEsRUFDaEIsWUFBWTtBQUFBLElBQ1YsY0FBYztBQUFBLElBQ2QsY0FBYztBQUFBLElBQ2QsTUFBTTtBQUFBLElBQ04sWUFBWTtBQUFBLEVBQ2Q7QUFBQSxFQUNBLFVBQVU7QUFBQSxJQUNSLE9BQU8sQ0FBQztBQUFBLEVBQ1Y7QUFBQSxFQUNBLGlCQUFpQjtBQUFBLElBQ2YsUUFBUSxDQUFDO0FBQUEsRUFDWDtBQUFBLEVBQ0EsVUFBVTtBQUFBLElBQ1IsVUFBVSxDQUFDO0FBQUEsRUFDYjtBQUFBLEVBQ0EsVUFBVTtBQUFBLElBQ1IsY0FBYztBQUFBLElBQ2QsY0FBYztBQUFBLElBQ2QsZUFBZTtBQUFBLElBQ2Ysa0JBQWtCLENBQUM7QUFBQSxJQUNuQixjQUFjO0FBQUEsRUFDaEI7QUFBQSxFQUNBLFVBQVU7QUFBQSxJQUNSLGNBQWEsb0JB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
