
import {createRequire as ___nfyCreateRequire} from "module";
import {fileURLToPath as ___nfyFileURLToPath} from "url";
import {dirname as ___nfyPathDirname} from "path";
let __filename=___nfyFileURLToPath(import.meta.url);
let __dirname=___nfyPathDirname(___nfyFileURLToPath(import.meta.url));
let require=___nfyCreateRequire(import.meta.url);


// netlify/functions/canvas-state.js
import { promises as fs } from "fs";
import { join } from "path";
var STATE_FILE = join("/tmp", "canvas-state.json");
var DEFAULT_STATE = {
  styleGuide: {
    languagePair: "English \u2192 English",
    readingLevel: "Grade 1",
    tone: "Narrator, engaging tone",
    philosophy: "Meaning-based"
  },
  glossary: {
    terms: {}
  },
  scriptureCanvas: {
    verses: {}
  },
  feedback: {
    comments: []
  },
  workflow: {
    currentPhase: "planning",
    currentVerse: "Ruth 1:1",
    currentPhrase: 0,
    phrasesCompleted: {},
    totalPhrases: 0
  },
  metadata: {
    lastUpdated: (/* @__PURE__ */ new Date()).toISOString(),
    version: 1
  }
};
async function loadState() {
  try {
    const data = await fs.readFile(STATE_FILE, "utf8");
    return JSON.parse(data);
  } catch (error) {
    return { ...DEFAULT_STATE };
  }
}
async function saveState(state) {
  try {
    await fs.writeFile(STATE_FILE, JSON.stringify(state, null, 2));
    return true;
  } catch (error) {
    console.error("Error saving state:", error);
    return false;
  }
}
async function getState() {
  const globalState = await loadState();
  return {
    ...globalState,
    metadata: {
      ...globalState.metadata,
      retrieved: (/* @__PURE__ */ new Date()).toISOString()
    }
  };
}
async function updateState(updates, agentId = "user") {
  try {
    if (!updates || typeof updates !== "object") {
      throw new Error("Invalid updates provided");
    }
    let globalState = await loadState();
    globalState = deepMerge(globalState, updates);
    globalState.metadata.lastUpdated = (/* @__PURE__ */ new Date()).toISOString();
    globalState.metadata.version = (globalState.metadata.version || 1) + 1;
    await saveState(globalState);
    return {
      success: true,
      state: await getState()
    };
  } catch (error) {
    return {
      success: false,
      error: error.message
    };
  }
}
async function resetState() {
  const globalState = {
    styleGuide: {
      languagePair: "English \u2192 English",
      readingLevel: "Grade 1",
      tone: "Narrator, engaging tone",
      philosophy: "Meaning-based"
    },
    glossary: {
      terms: {}
    },
    scriptureCanvas: {
      verses: {}
    },
    feedback: {
      comments: []
    },
    workflow: {
      currentPhase: "planning",
      currentVerse: "Ruth 1:1",
      currentPhrase: 0,
      phrasesCompleted: {},
      totalPhrases: 0
    },
    metadata: {
      lastUpdated: (/* @__PURE__ */ new Date()).toISOString(),
      version: 1
    }
  };
  await saveState(globalState);
  return getState();
}
function deepMerge(target, source) {
  const output = { ...target };
  if (isObject(target) && isObject(source)) {
    Object.keys(source).forEach((key) => {
      if (isObject(source[key])) {
        if (!(key in target)) {
          output[key] = source[key];
        } else {
          output[key] = deepMerge(target[key], source[key]);
        }
      } else {
        output[key] = source[key];
      }
    });
  }
  return output;
}
function isObject(item) {
  return item && typeof item === "object" && !Array.isArray(item);
}
var handler = async (req, context) => {
  const headers = {
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Headers": "Content-Type",
    "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
    "Content-Type": "application/json"
  };
  if (req.method === "OPTIONS") {
    return new Response("OK", { headers });
  }
  try {
    const url = new URL(req.url);
    const path = url.pathname.replace("/.netlify/functions/canvas-state", "");
    if (req.method === "GET" && (path === "" || path === "/")) {
      const state = await getState();
      return new Response(JSON.stringify(state), {
        status: 200,
        headers
      });
    }
    if (req.method === "GET" && path === "/history") {
      const state = await getState();
      return new Response(JSON.stringify({
        history: [],
        // No longer storing history with file-based approach
        currentState: state
      }), {
        status: 200,
        headers
      });
    }
    if (req.method === "POST" && path === "/update") {
      const body = await req.json();
      const { updates, agentId } = body;
      const result = await updateState(updates, agentId);
      return new Response(JSON.stringify(result), {
        status: result.success ? 200 : 400,
        headers
      });
    }
    if (req.method === "POST" && path === "/reset") {
      const state = await resetState();
      return new Response(JSON.stringify({
        success: true,
        state
      }), {
        status: 200,
        headers
      });
    }
    return new Response(JSON.stringify({
      error: `Method ${req.method} not allowed for path ${path}`
    }), {
      status: 405,
      headers
    });
  } catch (error) {
    console.error("Canvas state error:", error);
    return new Response(JSON.stringify({
      error: "Failed to process canvas state request",
      details: error.message
    }), {
      status: 500,
      headers: {
        ...headers,
        "Content-Type": "application/json"
      }
    });
  }
};
var canvas_state_default = handler;
export {
  canvas_state_default as default
};
//# sourceMappingURL=data:application/json;base64,
