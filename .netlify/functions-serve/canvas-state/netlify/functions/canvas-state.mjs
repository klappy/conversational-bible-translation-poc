
import {createRequire as ___nfyCreateRequire} from "module";
import {fileURLToPath as ___nfyFileURLToPath} from "url";
import {dirname as ___nfyPathDirname} from "path";
let __filename=___nfyFileURLToPath(import.meta.url);
let __dirname=___nfyPathDirname(___nfyFileURLToPath(import.meta.url));
let require=___nfyCreateRequire(import.meta.url);


// netlify/functions/canvas-state.js
import { getStore } from "@netlify/blobs";
var DEFAULT_STATE = {
  styleGuide: {
    userName: null,
    // User's name - collected first
    conversationLanguage: "English",
    // Default value
    sourceLanguage: "English",
    // Default value
    targetLanguage: "English",
    // Default value
    languagePair: "English \u2192 English",
    // Legacy, kept for compatibility
    readingLevel: "Grade 1",
    // Default value
    tone: "Straightforward and hopeful",
    // Default value
    philosophy: "Meaning-based",
    // Default value
    approach: "Dynamic",
    // Translation approach default
    targetCommunity: "Teens"
    // Default audience
  },
  settingsCustomized: false,
  // Track if user has customized settings
  glossary: {
    keyTerms: {},
    // Biblical terms (judges, famine, Bethlehem, Moab)
    userPhrases: {}
    // User's translations of each phrase (valuable training data)
  },
  scriptureCanvas: {
    verses: {}
  },
  feedback: {
    comments: []
  },
  workflow: {
    currentPhase: "planning",
    currentVerse: "Ruth 1:1",
    // Default verse to work with
    currentPhrase: 0,
    phrasesCompleted: {},
    totalPhrases: 0
  },
  metadata: {
    lastUpdated: (/* @__PURE__ */ new Date()).toISOString(),
    version: 1
  }
};
function getBlobStore(context) {
  const storeConfig = {
    name: "canvas-state"
  };
  if (context.site?.id) {
    storeConfig.siteID = context.site.id;
  }
  if (context.token) {
    storeConfig.token = context.token;
  }
  return getStore(storeConfig);
}
function getStateKey(req) {
  const url = new URL(req.url);
  const sessionId = req.headers.get?.("x-session-id") || req.headers["x-session-id"] || url.searchParams.get("session");
  if (!sessionId) return "default";
  return sessionId.startsWith("session_") ? sessionId : `session_${sessionId}`;
}
async function loadState(store, stateKey) {
  try {
    const data = await store.get(stateKey);
    if (data) {
      return JSON.parse(data);
    }
    return { ...DEFAULT_STATE };
  } catch (error) {
    console.error("Error loading state from Blobs:", error);
    return { ...DEFAULT_STATE };
  }
}
async function saveState(store, stateKey, state) {
  try {
    await store.set(stateKey, JSON.stringify(state));
    return true;
  } catch (error) {
    console.error("Error saving state to Blobs:", error);
    return false;
  }
}
async function getState(store, stateKey) {
  const globalState = await loadState(store, stateKey);
  return {
    ...globalState,
    metadata: {
      ...globalState.metadata,
      retrieved: (/* @__PURE__ */ new Date()).toISOString(),
      sessionId: stateKey
    }
  };
}
async function updateState(store, stateKey, updates) {
  try {
    if (!updates || typeof updates !== "object") {
      throw new Error("Invalid updates provided");
    }
    let globalState = await loadState(store, stateKey);
    globalState = deepMerge(globalState, updates);
    globalState.metadata.lastUpdated = (/* @__PURE__ */ new Date()).toISOString();
    globalState.metadata.version = (globalState.metadata.version || 1) + 1;
    await saveState(store, stateKey, globalState);
    return {
      success: true,
      state: await getState(store, stateKey)
    };
  } catch (error) {
    return {
      success: false,
      error: error.message
    };
  }
}
async function resetState(store, stateKey) {
  const globalState = {
    ...DEFAULT_STATE,
    metadata: {
      lastUpdated: (/* @__PURE__ */ new Date()).toISOString(),
      version: 1,
      sessionId: stateKey
    }
  };
  await saveState(store, stateKey, globalState);
  return getState(store, stateKey);
}
async function listSessions(store) {
  try {
    const { blobs } = await store.list();
    return blobs.map((blob) => ({
      key: blob.key,
      // Extract session ID from key
      sessionId: blob.key.startsWith("session_") ? blob.key.replace("session_", "") : blob.key,
      isDefault: blob.key === "default"
    }));
  } catch (error) {
    console.error("Error listing sessions:", error);
    return [];
  }
}
function deepMerge(target, source) {
  const output = { ...target };
  if (isObject(target) && isObject(source)) {
    Object.keys(source).forEach((key) => {
      if (isObject(source[key])) {
        if (!(key in target)) {
          output[key] = source[key];
        } else {
          output[key] = deepMerge(target[key], source[key]);
        }
      } else {
        output[key] = source[key];
      }
    });
  }
  return output;
}
function isObject(item) {
  return item && typeof item === "object" && !Array.isArray(item);
}
var handler = async (req, context) => {
  const headers = {
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Headers": "Content-Type, X-Session-ID",
    "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
    "Content-Type": "application/json"
  };
  if (req.method === "OPTIONS") {
    return new Response("OK", { headers });
  }
  try {
    const store = getBlobStore(context);
    const stateKey = getStateKey(req);
    const url = new URL(req.url);
    const path = url.pathname.replace("/.netlify/functions/canvas-state", "");
    console.log(`Canvas state request: ${req.method} ${path}, session: ${stateKey}`);
    if (req.method === "GET" && (path === "" || path === "/")) {
      const shouldReset = url.searchParams.get("reset") === "true";
      if (shouldReset) {
        console.log(`Resetting session via GET: ${stateKey}`);
        const state2 = await resetState(store, stateKey);
        return new Response(
          JSON.stringify({
            ...state2,
            metadata: {
              ...state2.metadata,
              reset: true,
              message: "Session reset successfully"
            }
          }),
          {
            status: 200,
            headers
          }
        );
      }
      const state = await getState(store, stateKey);
      return new Response(JSON.stringify(state), {
        status: 200,
        headers
      });
    }
    if (req.method === "GET" && path === "/sessions") {
      const sessions = await listSessions(store);
      return new Response(
        JSON.stringify({
          sessions,
          currentSession: stateKey
        }),
        {
          status: 200,
          headers
        }
      );
    }
    if (req.method === "GET" && path === "/history") {
      const state = await getState(store, stateKey);
      return new Response(
        JSON.stringify({
          history: [],
          // No longer storing history with Blobs approach
          currentState: state
        }),
        {
          status: 200,
          headers
        }
      );
    }
    if (req.method === "POST" && path === "/update") {
      const body = await req.json();
      const { updates, agentId } = body;
      const result = await updateState(store, stateKey, updates, agentId);
      return new Response(JSON.stringify(result), {
        status: result.success ? 200 : 400,
        headers
      });
    }
    if (req.method === "POST" && path === "/reset") {
      const state = await resetState(store, stateKey);
      return new Response(
        JSON.stringify({
          success: true,
          state
        }),
        {
          status: 200,
          headers
        }
      );
    }
    if (req.method === "DELETE" && path === "/session") {
      try {
        await store.delete(stateKey);
        return new Response(
          JSON.stringify({
            success: true,
            message: `Session ${stateKey} deleted`
          }),
          {
            status: 200,
            headers
          }
        );
      } catch (error) {
        return new Response(
          JSON.stringify({
            success: false,
            error: error.message
          }),
          {
            status: 500,
            headers
          }
        );
      }
    }
    return new Response(
      JSON.stringify({
        error: `Method ${req.method} not allowed for path ${path}`
      }),
      {
        status: 405,
        headers
      }
    );
  } catch (error) {
    console.error("Canvas state error:", error);
    return new Response(
      JSON.stringify({
        error: "Failed to process canvas state request",
        details: error.message
      }),
      {
        status: 500,
        headers: {
          ...headers,
          "Content-Type": "application/json"
        }
      }
    );
  }
};
var canvas_state_default = handler;
export {
  canvas_state_default as default
};
//# sourceMappingURL=data:application/json;base64,
